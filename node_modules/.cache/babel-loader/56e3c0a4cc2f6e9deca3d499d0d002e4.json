{"remainingRequest":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/babel-loader/lib/index.js!/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/goods/Params.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/goods/Params.vue","mtime":1644935477432},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Params.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwKA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA;AACA,MAAA,QAAA,EAAA,EAFA;AAGA;AACA,MAAA,YAAA,EAAA,EAJA;AAKA,MAAA,SAAA,EAAA;AACA,QAAA,KAAA,EAAA,QADA;AAEA,QAAA,KAAA,EAAA,UAFA;AAGA,QAAA,QAAA,EAAA,UAHA;AAIA;AACA,QAAA,aAAA,EAAA;AALA,OALA;AAYA;AACA,MAAA,UAAA,EAAA,MAbA;AAcA;AACA,MAAA,aAAA,EAAA,EAfA;AAgBA;AACA,MAAA,aAAA,EAAA,EAjBA;AAkBA;AACA,MAAA,gBAAA,EAAA,KAnBA;AAoBA;AACA,MAAA,iBAAA,EAAA,KArBA;AAsBA;AACA,MAAA,OAAA,EAAA;AACA,QAAA,SAAA,EAAA;AADA,OAvBA;AA0BA;AACA,MAAA,YAAA,EAAA;AACA,QAAA,SAAA,EAAA,CACA;AACA,UAAA,QAAA,EAAA,IADA;AAEA,UAAA,OAAA,EAAA,SAFA;AAGA,UAAA,OAAA,EAAA;AAHA,SADA;AADA,OA3BA;AAoCA;AACA,MAAA,QAAA,EAAA,EArCA;AAsCA,MAAA,gBAAA,EAAA,KAtCA;AAuCA,MAAA,gBAAA,EAAA;AAvCA,KAAA;AAyCA,GA5CA;AA6CA,EAAA,OA7CA,qBA6CA;AACA,SAAA,aAAA;AACA,GA/CA;AAgDA,EAAA,QAAA,EAAA;AACA;AACA,IAAA,aAFA,2BAEA;AACA,aAAA,KAAA,YAAA,CAAA,MAAA,KAAA,CAAA;AACA,KAJA;AAKA;AACA,IAAA,MANA,oBAMA;AACA,UAAA,KAAA,YAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,eAAA,KAAA,YAAA,CAAA,CAAA,CAAA;AACA;;AACA,aAAA,IAAA;AACA,KAXA;AAYA;AACA,IAAA,SAbA,uBAaA;AACA,UAAA,KAAA,UAAA,KAAA,MAAA,EAAA;AACA,eAAA,MAAA;AACA,OAFA,MAEA;AACA,eAAA,MAAA;AACA;AACA;AAnBA,GAhDA;AAqEA,EAAA,OAAA,EAAA;AACA;AACA;AACA;AACA,IAAA,aAJA,2BAIA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA,YAAA,CADA;;AAAA;AAAA;AACA,gBAAA,GADA,yBACA,IADA;;AAEA,oBAAA,GAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GAAA,EAAA;AACA,kBAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,WAAA;AACA;;AACA,gBAAA,KAAA,CAAA,QAAA,GAAA,GAAA,CAAA,IAAA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA,QAAA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,KAXA;;AAYA;AACA;AACA;AACA,IAAA,YAfA,0BAeA;AACA,WAAA,aAAA;AACA,KAjBA;;AAkBA;AACA;AACA;AACA,IAAA,cArBA,4BAqBA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,UAAA;AACA,WAAA,aAAA;AACA,KAxBA;;AAyBA;AACA;AACA;AACA,IAAA,aA5BA,2BA4BA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEA,MAAA,CAAA,YAAA,CAAA,MAAA,KAAA,CAFA;AAAA;AAAA;AAAA;;AAGA,gBAAA,MAAA,CAAA,YAAA,GAAA,EAAA;AACA,gBAAA,MAAA,CAAA,aAAA,GAAA,EAAA;AACA,gBAAA,MAAA,CAAA,aAAA,GAAA,EAAA;AALA;AAAA;;AAAA;AAOA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA,YAAA,EARA,CASA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAA,MAAA,WAAA,MAAA,CAAA,UAAA,kBAAA,GAAA,IAAA,CAhBA,CAkBA;;AAlBA;AAAA,uBAmBA,MAAA,CAAA,KAAA,CAAA,GAAA,sBAAA,MAAA,CAAA,MAAA,kBAAA;AACA,kBAAA,MAAA,EAAA;AAAA,oBAAA,GAAA,EAAA,MAAA,CAAA;AAAA;AADA,iBAAA,CAnBA;;AAAA;AAAA;AAmBA,gBAAA,GAnBA,yBAmBA,IAnBA;;AAAA,sBAsBA,GAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GAtBA;AAAA;AAAA;AAAA;;AAAA,kDAuBA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,UAAA,CAvBA;;AAAA;AAyBA,gBAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA;AAEA;AACA;AACA;;AACA,gBAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA;AACA,kBAAA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,EAAA,CAFA,CAGA;;AACA,kBAAA,IAAA,CAAA,YAAA,GAAA,KAAA,CAJA,CAKA;;AACA,kBAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,iBAPA,EA9BA,CAuCA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAA,MAAA,WAAA,MAAA,CAAA,UAAA,eAAA,GAAA,GAAA,CAAA,IAAA;AACA,gBAAA,MAAA,WAAA,MAAA,CAAA,UAAA,kBAAA,GAAA,KAAA;;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiDA,KA7EA;;AA8EA;AACA;AACA;AACA,IAAA,eAjFA,6BAiFA;AACA,WAAA,KAAA,CAAA,UAAA,CAAA,WAAA;AACA,KAnFA;;AAoFA;AACA;AACA;AACA,IAAA,SAvFA,uBAuFA;AAAA;;AACA,WAAA,KAAA,CAAA,UAAA,CAAA,QAAA;AAAA,2EAAA,kBAAA,KAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA,KADA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAIA,MAAA,CAAA,KAAA,CAAA,IAAA,sBAAA,MAAA,CAAA,MAAA,kBAAA;AACA,oBAAA,SAAA,EAAA,MAAA,CAAA,OAAA,CAAA,SADA;AAEA,oBAAA,QAAA,EAAA,MAAA,CAAA;AAFA,mBAAA,CAJA;;AAAA;AAAA;AAIA,kBAAA,GAJA,yBAIA,IAJA;;AAAA,wBAQA,GAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GARA;AAAA;AAAA;AAAA;;AAAA,oDASA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,SAAA,CATA;;AAAA;AAWA,kBAAA,MAAA,CAAA,aAAA;;AACA,kBAAA,MAAA,CAAA,gBAAA,GAAA,KAAA;AAZA,oDAaA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,SAAA,CAbA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAA;;AAAA;AAAA;AAAA;AAAA;AAiBA,KAzGA;;AA0GA;AACA;AACA;AACA;AACA,IAAA,cA9GA,0BA8GA,GA9GA,EA8GA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAMA,MAAA,CAAA,KAAA,CAAA,GAAA,sBAAA,MAAA,CAAA,MAAA,yBAAA,GAAA,CAAA,OAAA,GACA;AAAA,kBAAA,MAAA,EAAA;AAAA,oBAAA,QAAA,EAAA,MAAA,CAAA;AAAA;AAAA,iBADA,CANA;;AAAA;AAAA;AAMA,gBAAA,GANA,yBAMA,IANA;;AAAA,sBAQA,GAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GARA;AAAA;AAAA;AAAA;;AAAA,kDASA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,UAAA,CATA;;AAAA;AAWA,gBAAA,MAAA,CAAA,QAAA,GAAA,GAAA,CAAA,IAAA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA,QAAA;AACA,gBAAA,MAAA,CAAA,iBAAA,GAAA,IAAA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA,KA7HA;;AA8HA;AACA;AACA;AACA,IAAA,gBAjIA,8BAiIA;AACA,WAAA,KAAA,CAAA,WAAA,CAAA,WAAA;AACA,KAnIA;;AAoIA;AACA;AACA;AACA,IAAA,UAvIA,wBAuIA;AAAA;;AACA,WAAA,KAAA,CAAA,WAAA,CAAA,QAAA;AAAA,4EAAA,kBAAA,KAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA,KADA;AAAA;AAAA;AAAA;;AAAA,oDAEA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,cAAA,CAFA;;AAAA;AAAA;AAAA,yBAIA,MAAA,CAAA,KAAA,CAAA,GAAA,sBAAA,MAAA,CAAA,MAAA,yBAAA,MAAA,CAAA,QAAA,CAAA,OAAA,GAAA;AACA,oBAAA,SAAA,EAAA,MAAA,CAAA,QAAA,CAAA,SADA;AAEA,oBAAA,QAAA,EAAA,MAAA,CAAA;AAFA,mBAAA,CAJA;;AAAA;AAAA;AAIA,kBAAA,GAJA,yBAIA,IAJA;;AAAA,wBAQA,GAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GARA;AAAA;AAAA;AAAA;;AAAA,oDASA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,SAAA,CATA;;AAAA;AAWA,kBAAA,MAAA,CAAA,iBAAA,GAAA,KAAA;;AACA,kBAAA,MAAA,CAAA,aAAA;;AAZA,oDAaA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,SAAA,CAbA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAA;;AAAA;AAAA;AAAA;AAAA;AAiBA,KAzJA;;AA0JA;AACA;AACA;AACA;AACA,IAAA,YA9JA,wBA8JA,MA9JA,EA8JA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA,MAAA,CAAA,QAAA,iEAAA,MAAA,CAAA,SAAA,kCAAA,IAAA,EAAA;AACA,kBAAA,iBAAA,EAAA,IADA;AAEA,kBAAA,gBAAA,EAAA,IAFA;AAGA,kBAAA,IAAA,EAAA;AAHA,iBAAA,EAIA,KAJA,CAIA,UAAA,GAAA,EAAA;AACA,yBAAA,GAAA;AACA,iBANA,CAFA;;AAAA;AAEA,gBAAA,aAFA;;AAAA,sBASA,aAAA,KAAA,SATA;AAAA;AAAA;AAAA;;AAAA,kDAUA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAVA;;AAAA;AAAA;AAAA,uBAYA,MAAA,CAAA,KAAA,CAAA,MAAA,sBAAA,MAAA,CAAA,MAAA,yBAAA,MAAA,EAZA;;AAAA;AAAA;AAYA,gBAAA,GAZA,yBAYA,IAZA;;AAAA,sBAaA,GAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GAbA;AAAA;AAAA;AAAA;;AAAA,kDAcA,MAAA,CAAA,QAAA,CAAA,KAAA,uBAAA,MAAA,CAAA,SAAA,mBAdA;;AAAA;AAgBA,gBAAA,MAAA,CAAA,aAAA;;AAhBA,kDAiBA,MAAA,CAAA,QAAA,CAAA,OAAA,uBAAA,MAAA,CAAA,SAAA,mBAjBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA,KAlLA;;AAmLA;AACA;AACA;AACA;AACA,IAAA,kBAvLA,8BAuLA,GAvLA,EAuLA;AACA,UAAA,GAAA,CAAA,UAAA,CAAA,IAAA,GAAA,MAAA,KAAA,CAAA,EAAA;AACA,QAAA,GAAA,CAAA,YAAA,GAAA,KAAA;AACA,QAAA,GAAA,CAAA,UAAA,GAAA,EAAA;AACA;AACA,OALA,CAMA;;;AACA,MAAA,GAAA,CAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAAA,UAAA,CAAA,IAAA,EAAA;AACA,MAAA,GAAA,CAAA,UAAA,GAAA,EAAA;AACA,MAAA,GAAA,CAAA,YAAA,GAAA,KAAA,CATA,CAUA;;AACA,WAAA,YAAA,CAAA,GAAA;AACA,KAnMA;;AAoMA;AACA;AACA;AACA;AACA,IAAA,SAxMA,qBAwMA,GAxMA,EAwMA;AAAA;;AACA,MAAA,GAAA,CAAA,YAAA,GAAA,IAAA,CADA,CAEA;AACA;;AACA,WAAA,SAAA,CAAA,UAAA,CAAA,EAAA;AACA,QAAA,MAAA,CAAA,KAAA,CAAA,YAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA;AACA,OAFA;AAGA,KA/MA;;AAgNA;AACA;AACA;AACA;AACA;AACA,IAAA,WArNA,uBAqNA,KArNA,EAqNA,GArNA,EAqNA;AACA,MAAA,GAAA,CAAA,SAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACA,WAAA,YAAA,CAAA,GAAA;AACA,KAxNA;;AAyNA;AACA;AACA;AACA;AACA,IAAA,YA7NA,wBA6NA,GA7NA,EA6NA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,MAAA,CAAA,KAAA,CAAA,GAAA,sBAAA,MAAA,CAAA,MAAA,yBAAA,GAAA,CAAA,OAAA,GAAA;AACA,kBAAA,SAAA,EAAA,GAAA,CAAA,SADA;AAEA,kBAAA,QAAA,EAAA,MAAA,CAAA,UAFA;AAGA,kBAAA,SAAA,EAAA,GAAA,CAAA,SAAA,CAAA,IAAA,CAAA,GAAA;AAHA,iBAAA,CADA;;AAAA;AAAA;AACA,gBAAA,GADA,yBACA,IADA;;AAAA,sBAMA,GAAA,CAAA,IAAA,CAAA,MAAA,KAAA,GANA;AAAA;AAAA;AAAA;;AAAA,kDAOA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,UAAA,CAPA;;AAAA;AASA,gBAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAxOA;AArEA,CAAA","sourcesContent":["<template>\n  <div>\n    <!--面包屑导航区域-->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>分类参数</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!--卡片视图区域-->\n    <el-card>\n      <!--警告区域-->\n      <el-alert\n        :closable=\"false\"\n        show-icon\n        title=\"注意: 只允许为三级分类设置相关参数!\"\n        type=\"warning\">\n      </el-alert>\n\n      <!--  选择商品分类区域 -->\n      <el-row class=\"cat_opt\">\n        <el-col>\n          <span>选择商品分类: </span>\n          <!-- 选择商品分类的级联选择框 -->\n          <el-cascader\n            v-model=\"selectedKeys\"\n            :options=\"cateList\"\n            :props=\"cateProps\"\n            clearable\n            expand-trigger=\"hover\"\n            @change=\"handleChange\"></el-cascader>\n        </el-col>\n      </el-row>\n\n      <!-- tab页签区域 -->\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleTabClick\">\n        <!-- 添加动态参数的面板 -->\n        <el-tab-pane label=\"动态参数\" name=\"many\">\n          <!-- 添加参数按钮\n            注意: disabled返回值是一个TRUE/FALSE, 所以需要 v-bind:disabled 属性绑定\n          -->\n          <el-button :disabled=\"isBtnDisabled\" size=\"mini\" type=\"primary\" @click=\"addDialogVisible= true\">添加参数\n          </el-button>\n          <!-- 动态参数表格 -->\n          <el-table v-loading=\"manyTableLoading\"\n                    :data=\"manyTableData\"\n                    border\n                    element-loading-text=\"拼命加载中\"\n                    stripe>\n            <el-table-column type=\"expand\">\n              <!-- 作用域插槽-->\n              <template slot-scope=\"scope\">\n                <!-- 循环渲染Tag标签 -->\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i,scope.row)\">\n                  {{ item }}\n                </el-tag>\n                <!-- 输入的文本框-->\n                <el-input\n                  v-if=\"scope.row.inputVisible\"\n                  ref=\"saveTagInput\"\n                  v-model=\"scope.row.inputValue\"\n                  class=\"input-new-tag\"\n                  size=\"small\"\n                  @blur=\"handleInputConfirm(scope.row)\"\n                  @keyup.enter.native=\"handleInputConfirm(scope.row)\">\n                </el-input>\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag\n                </el-button>\n              </template>\n            </el-table-column>\n            <!--索引列-->\n            <el-table-column label=\"#\" type=\"index\"></el-table-column>\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template slot-scope=\"scope\">\n                <el-button icon=\"el-icon-edit\" size=\"mini\" type=\"primary\" @click=\"showEditDialog(scope.row)\">编辑\n                </el-button>\n                <el-button icon=\"el-icon-delete\" size=\"mini\" type=\"danger\" @click=\"removeParams(scope.row.attr_id)\">删除\n                </el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n        <!-- 添加静态属性的面板 -->\n        <el-tab-pane label=\"静态属性\" name=\"only\">\n          <!-- 添加属性按钮-->\n          <el-button :disabled=\"isBtnDisabled\" size=\"mini\" type=\"primary\" @click=\"addDialogVisible = true\">添加属性\n          </el-button>\n          <!-- 静态属性表格 -->\n          <el-table v-loading=\"onlyTableLoading\"\n                    :data=\"onlyTableData\"\n                    border\n                    element-loading-text=\"拼命加载中\"\n                    stripe>\n            <!--展开行-->\n            <el-table-column type=\"expand\">\n              <!-- 作用域插槽-->\n              <template slot-scope=\"scope\">\n                <!-- 循环渲染Tag标签 -->\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i,scope.row)\">\n                  {{ item }}\n                </el-tag>\n                <!-- 输入的文本框-->\n                <el-input\n                  v-if=\"scope.row.inputVisible\"\n                  ref=\"saveTagInput\"\n                  v-model=\"scope.row.inputValue\"\n                  class=\"input-new-tag\"\n                  size=\"small\"\n                  @blur=\"handleInputConfirm(scope.row)\"\n                  @keyup.enter.native=\"handleInputConfirm(scope.row)\">\n                </el-input>\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag\n                </el-button>\n              </template>\n            </el-table-column>\n            <!--索引列-->\n            <el-table-column label=\"#\" type=\"index\"></el-table-column>\n            <el-table-column label=\"属性名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template slot-scope=\"scope\">\n                <el-button icon=\"el-icon-edit\" size=\"mini\" type=\"primary\" @click=\"showEditDialog(scope.row)\">编辑\n                </el-button>\n                <el-button icon=\"el-icon-delete\" size=\"mini\" type=\"danger\" @click=\"removeParams(scope.row.attr_id)\">删除\n                </el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n      </el-tabs>\n    </el-card>\n\n    <!-- 添加参数对话框-->\n    <el-dialog :title=\"\n                '添加' + this.titleText\"\n               :visible.sync=\"addDialogVisible\"\n               width=\"35%\"\n               @close=\"addDialogClosed\">\n      <el-form ref=\"addFormRef\" :model=\"addForm\" :rules=\"addFormRules\" label-width=\"100px\">\n        <el-form-item :label=\"this.titleText\" prop=\"attr_name\">\n          <el-input v-model=\"addForm.attr_name\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addParams\">确 定</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 添加修改对话框-->\n    <el-dialog :title=\"'修改' + this.titleText\"\n               :visible.sync=\"editDialogVisible\"\n               width=\"35%\"\n               @close=\"editDialogClosed\">\n      <el-form ref=\"editFormRef\" :model=\"editForm\" :rules=\"addFormRules\" label-width=\"100px\">\n        <el-form-item :label=\"this.titleText\" prop=\"attr_name\">\n          <el-input v-model=\"editForm.attr_name\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"editParams\">确 定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Params',\n  data () {\n    return {\n      // 商品分类列表\n      cateList: [],\n      // 级联选择框双向绑定到的数组\n      selectedKeys: [],\n      cateProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children',\n        // 从el-cascader标签的属性,中移动到这个cascadeProps中\n        expandTrigger: 'hover'\n      },\n      // 被激活的页签的名称\n      activeName: 'many',\n      // 动态参数的数据\n      manyTableData: [],\n      // 静态参数的数据\n      onlyTableData: [],\n      // 控制添加对话框的显示与隐藏\n      addDialogVisible: false,\n      // 控制修改对话框的显示与隐藏\n      editDialogVisible: false,\n      // 添加参数的表单对象\n      addForm: {\n        attr_name: ''\n      },\n      // 添加表单的校验规则对象\n      addFormRules: {\n        attr_name: [\n          {\n            required: true,\n            message: '请输入参数名称',\n            trigger: 'blur'\n          }\n        ]\n      },\n      // 修改参数的表单对象\n      editForm: {},\n      onlyTableLoading: false,\n      manyTableLoading: false\n    }\n  },\n  created () {\n    this.getCategories()\n  },\n  computed: {\n    // 如果按钮需要被警用, 则返回TRUE, 否则返回FALSE\n    isBtnDisabled () {\n      return this.selectedKeys.length !== 3\n    },\n    // 当前选中的三级分裂Id\n    cateId () {\n      if (this.selectedKeys.length === 3) {\n        return this.selectedKeys[2]\n      }\n      return null\n    },\n    // 动态计算标题文本\n    titleText () {\n      if (this.activeName === 'many') {\n        return '动态参数'\n      } else {\n        return '静态属性'\n      }\n    }\n  },\n  methods: {\n    /**\n     * 获取所有商品列表\n     */\n    async getCategories () {\n      const { data: res } = await this.$http.get('categories')\n      if (res.meta.status !== 200) {\n        this.$message.error('获取商品分类失败!')\n      }\n      this.cateList = res.data\n      console.log(this.cateList)\n    },\n    /**\n     * 级联选择框选中项变化, 会触发这个函数\n     */\n    handleChange () {\n      this.getParamsData()\n    },\n    /**\n     * tab页面点击事件的处理函数\n     */\n    handleTabClick () {\n      console.log(this.activeName)\n      this.getParamsData()\n    },\n    /**\n     * 获取参数的列表数据\n     */\n    async getParamsData () {\n      // 证明选中的不是三级分类\n      if (this.selectedKeys.length !== 3) {\n        this.selectedKeys = []\n        this.manyTableData = []\n        this.onlyTableData = []\n      } else {\n        // 证明是三级分类\n        console.log(this.selectedKeys)\n        // if (this.activeName === 'many') {\n        //   this.manyTableLoading = true\n        // } else {\n        //   this.onlyTableLoading = true\n        // }\n        // 这里判断下当前激活的页签名称\n        // 使用es6语法的属性表达式 + 模板字符串, 优雅解决上面判断问题\n        this[`${this.activeName}TableLoading`] = true\n\n        // 然后在发起请求, 根据所选分类的Id, 和当前所处的面板, 获取对应的参数\n        const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, {\n          params: { sel: this.activeName }\n        })\n        if (res.meta.status !== 200) {\n          return this.$message.error('获取参数列表失败')\n        } else {\n          console.log(res.data)\n\n          /**\n           * 注意: ''.split(' ') 空字符串切分的时候, 会获得只有一个空串的数组 [\"\"]\n           */\n          res.data.forEach(item => {\n            // 三元表达式\n            item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []\n            // 控制输入框与按钮的切换形式\n            item.inputVisible = false\n            // 文本框中输入的值\n            item.inputValue = ''\n          })\n\n          // 请求只会发起一次请求, 但是结果有两种情况, 所以需要进行判断处理\n          // if (this.activeName === 'many') {\n          //   this.manyTableData = res.data\n          // } else {\n          //   this.onlyTableData = res.data\n          // }\n          this[`${this.activeName}TableData`] = res.data\n          this[`${this.activeName}TableLoading`] = false\n        }\n      }\n    },\n    /**\n     * 监听添加对话框的关闭事件\n     */\n    addDialogClosed () {\n      this.$refs.addFormRef.resetFields()\n    },\n    /**\n     * 点击按钮, 添加参数\n     */\n    addParams () {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) {\n\n        } else {\n          const { data: res } = await this.$http.post(`categories/${this.cateId}/attributes`, {\n            attr_name: this.addForm.attr_name,\n            attr_sel: this.activeName\n          })\n          if (res.meta.status !== 201) {\n            return this.$message.error('添加参数失败!')\n          } else {\n            this.getParamsData()\n            this.addDialogVisible = false\n            return this.$message.success('添加参数成功!')\n          }\n        }\n      })\n    },\n    /**\n     * 显示修改对话框的事件\n     *@param row\n     */\n    async showEditDialog (row) {\n      /**\n       * bug点: 错误写法 `categories/${this.cateId}/attributes/${this.row.attr_id}`\n       * row中加上了 this关键字, 这样的话 this引用的是 data(){} 中的row数据对象, 而不是形参row\n       * 小结: 这个this关键字, 不引用data(){}, 不要随便乱加上\n       */\n      const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes/${row.attr_id}`,\n        { params: { attr_sel: this.activeName } })\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取参数信息失败')\n      } else {\n        this.editForm = res.data\n        console.log(this.editForm)\n        this.editDialogVisible = true\n      }\n    },\n    /**\n     * 监听修改对话框的关闭事件\n     */\n    editDialogClosed () {\n      this.$refs.editFormRef.resetFields()\n    },\n    /**\n     * 点击按钮, 修改参数\n     */\n    editParams () {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) {\n          return this.$message.error('校验不通过, 请重新输入')\n        } else {\n          const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${this.editForm.attr_id}`, {\n            attr_name: this.editForm.attr_name,\n            attr_sel: this.activeName\n          })\n          if (res.meta.status !== 200) {\n            return this.$message.error('更新参数失败!')\n          } else {\n            this.editDialogVisible = false\n            this.getParamsData()\n            return this.$message.success('更新参数成功!')\n          }\n        }\n      })\n    },\n    /**\n     * 根据Id删除对应的 参数/属性\n     * @param attrId\n     */\n    async removeParams (attrId) {\n      // 弹框询问用户是否删除数据\n      const confirmResult = await this.$confirm(`此操作将永久删除该${this.titleText}, 是否继续?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch(err => {\n        return err\n      })\n      if (confirmResult !== 'confirm') {\n        return this.$message.info('已取消删除!')\n      } else {\n        const { data: res } = await this.$http.delete(`categories/${this.cateId}/attributes/${attrId}`)\n        if (res.meta.status !== 200) {\n          return this.$message.error(`删除${this.titleText}失败!`)\n        } else {\n          this.getParamsData()\n          return this.$message.success(`删除${this.titleText}成功!`)\n        }\n      }\n    },\n    /**\n     * 文本框失去焦点, 或按下enter都会触发\n     * @param row\n     */\n    handleInputConfirm (row) {\n      if (row.inputValue.trim().length === 0) {\n        row.inputVisible = false\n        row.inputValue = ''\n        return\n      }\n      // 如果没有return, 这里证明输入的内容, 需要做后序处理\n      row.attr_vals.push(row.inputValue.trim())\n      row.inputValue = ''\n      row.inputVisible = false\n      // 发起请求, 保存这次操作\n      this.saveAttrVals(row)\n    },\n    /**\n     *点击按钮, 展示文本输入框\n     * @param row\n     */\n    showInput (row) {\n      row.inputVisible = true\n      // 让文本框自动获取焦点\n      // $nextTick方法的作用, 就是放页面上元素被重新渲染之后, 才会指定回调函数中的代码\n      this.$nextTick(_ => {\n        this.$refs.saveTagInput.$refs.input.focus()\n      })\n    },\n    /**\n     * 删除对应的参数可选项\n     * @param index\n     * @param row\n     */\n    handleClose (index, row) {\n      row.attr_vals.splice(index, 1)\n      this.saveAttrVals(row)\n    },\n    /**\n     * 将对 attr_vals的操作保存到数据库\n     * @param row\n     */\n    async saveAttrVals (row) {\n      const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${row.attr_id}`, {\n        attr_name: row.attr_name,\n        attr_sel: this.activeName,\n        attr_vals: row.attr_vals.join(' ')\n      })\n      if (res.meta.status !== 200) {\n        return this.$message.error('修改参数项失败!')\n      } else {\n        this.$message.success('修改参数项成功!')\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.cat_opt {\n  margin: 15px 0;\n}\n\n.el-tag + .el-tag {\n  margin-left: 10px;\n}\n\n.button-new-tag {\n  margin-left: 10px;\n  height: 32px;\n  line-height: 30px;\n  padding-top: 0;\n  padding-bottom: 0;\n}\n\n.input-new-tag {\n  width: 90px;\n  margin-left: 10px;\n  vertical-align: bottom;\n}\n</style>\n"],"sourceRoot":"src/components/goods"}]}