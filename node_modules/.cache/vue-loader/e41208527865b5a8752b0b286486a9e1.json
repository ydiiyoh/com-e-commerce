{"remainingRequest":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/power/Roles.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/power/Roles.vue","mtime":1644935477432},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Roles.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Roles.vue","sourceRoot":"src/components/power","sourcesContent":["<template>\n  <div>\n    <!--面包屑导航区域-->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>权限管理</el-breadcrumb-item>\n      <el-breadcrumb-item>角色列表</el-breadcrumb-item>\n    </el-breadcrumb>\n    <!-- 卡片视图-->\n    <el-card>\n      <!--添加角色区域-->\n      <el-row>\n        <el-col>\n          <el-button type=\"primary\" @click=\"addRoleDialogVisible = true\">添加角色</el-button>\n        </el-col>\n      </el-row>\n\n      <!-- 角色列表区域-->\n      <el-table\n        v-loading=\"!rolesList.length\"\n        :data=\"rolesList\"\n        :stripe=\"true\"\n        border\n        element-loading-text=\"拼命加载中\"\n        row-key=\"id\"\n        style=\"width: 100%\">\n        <!--展开列-->\n        <el-table-column type=\"expand\">\n          <!--作用域插槽-->\n          <template slot-scope=\"scope\">\n            <!--<pre>元素表示预先格式化的文本，该文本将完全按照 HTML 文件中所写的方式呈现-->\n            <!--<pre>-->\n            <!--{{ scope.row }}-->\n            <!--</pre>-->\n            <el-row v-for=\"(item, i1) in scope.row.children\" :key=\"item.id\"\n                    :class=\"['bd-bottom', i1 ===0 ? 'bd-top': '' ,'vcenter']\">\n              <!--渲染一级权限-->\n              <el-col :span=\"5\">\n                <el-tag closable @close=\"removeRightById(scope.row, item.id)\">\n                  {{ item.authName }}\n                </el-tag>\n                <i class=\"el-icon-caret-right\"></i>\n              </el-col>\n              <!--渲染二级和三级权限-->\n              <el-col :span=\"19\">\n                <!--  通过for循环, 嵌套渲染二级权限 -->\n                <el-row v-for=\"(subItem,i2) in item.children\" :key=\"subItem.id\"\n                        :class=\"[i2 === 0 ? '':'bd-top', 'vcenter']\">\n                  <el-col :span=\"6\">\n                    <el-tag closable type=\"success\" @close=\"removeRightById(scope.row, subItem.id)\">\n                      {{ subItem.authName }}\n                    </el-tag>\n                    <i class=\"el-icon-caret-right\"></i>\n                  </el-col>\n                  <el-col :span=\"18\">\n                    <el-tag v-for=\"(item3) in subItem.children\" :key=\"item3.id\" closable type=\"warning\"\n                            @close=\"removeRightById(scope.row, item3.id)\">\n                      {{ item3.authName }}\n                    </el-tag>\n                  </el-col>\n                </el-row>\n              </el-col>\n            </el-row>\n          </template>\n        </el-table-column>\n        <!-- 索引列 -->\n        <el-table-column label=\"#\"\n                         type=\"index\">\n        </el-table-column>\n        <el-table-column label=\"角色名称\"\n                         prop=\"roleName\">\n        </el-table-column>\n        <el-table-column label=\"角色描述\"\n                         prop=\"roleDesc\">\n        </el-table-column>\n        <!-- 加上了这个with=\"300\", 保证了页面缩小的时候, 三个按钮都在一行上显示-->\n        <el-table-column label=\"操作\" width=\"300px\">\n          <template slot-scope=\"scope\">\n            <!-- 修改按钮 -->\n            <el-button icon=\"el-icon-edit\" size=\"mini\" type=\"primary\" @click=\"showEditDialog(scope.row.id)\">编辑\n            </el-button>\n\n            <!-- 删除按钮-->\n            <el-button icon=\"el-icon-delete\" size=\"mini\" type=\"danger\" @click=\"removeRoleById(scope.row.id)\">删除\n            </el-button>\n\n            <!-- 分配角色按钮-->\n            <el-button icon=\"el-icon-setting\" size=\"mini\" type=\"warning\" @click=\"showSetRightDialog(scope.row)\">分配权限\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n\n    <!--分配权限对话框-->\n    <el-dialog\n      :visible.sync=\"setRightDialogVisible\"\n      title=\"分配权限\"\n      width=\"50%\"\n      @close=\"setRightDialogClosed\">\n      <!-- 树形控件\n          bug点:  写出:data=\"rolesList\"  改成 :data=\"rightsList\"\n          #\n          注意点: 这个  node-key=\"id\"  id 猜测是从\n                  :data=\"rightsList\"绑定的rightsList: []数组对象取出来每单个对象的id\n      -->\n      <el-tree ref=\"treeRef\" :data=\"rightsList\"\n               :default-checked-keys=\"defKeys\" :default-expand-all=\"true\"\n               :props=\"treeProps\" node-key=\"id\" show-checkbox></el-tree>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"setRightDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"allotRights\">确 定</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 添加角色的对话框 -->\n    <el-dialog\n      :visible.sync=\"addRoleDialogVisible\"\n      title=\"添加角色\"\n      width=\"35%\"\n      @close=\"addDialogClosed\">\n      <!-- 内容主体区域 -->\n      <el-form ref=\"addFormRef\" :model=\"addForm\" :rules=\"addFormRules\" label-width=\"70px\">\n        <!-- prop=username 对应了 addFormRules中的username校验规则-->\n        <el-form-item label=\"角色名称\" label-width=\"85px\" prop=\"roleName\">\n          <el-input v-model=\"addForm.roleName\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"角色描述\" label-width=\"85px\" prop=\"roleDesc\">\n          <el-input v-model=\"addForm.roleDesc\"></el-input>\n        </el-form-item>\n      </el-form>\n      <!-- 底部区域 -->\n      <span slot=\"footer\" class=\"dialog-footer\">\n    <el-button @click=\"addRoleDialogVisible = false\">取 消</el-button>\n    <el-button type=\"primary\" @click=\"addRole\">确 定</el-button>\n  </span>\n    </el-dialog>\n\n    <!-- 编辑角色的对话框 -->\n    <el-dialog\n      :visible.sync=\"editRoleDialogVisible\"\n      title=\"编辑角色\"\n      width=\"35%\"\n      @close=\"editDialogClosed\">\n      <!-- 内容主体区域 -->\n      <el-form ref=\"editFormRef\" :model=\"editForm\" :rules=\"addFormRules\" label-width=\"70px\">\n        <!-- prop=username 对应了 addFormRules中的username校验规则-->\n        <el-form-item label=\"角色名称\" label-width=\"85px\" prop=\"roleName\">\n          <el-input v-model=\"editForm.roleName\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"角色描述\" label-width=\"85px\" prop=\"roleDesc\">\n          <el-input v-model=\"editForm.roleDesc\"></el-input>\n        </el-form-item>\n      </el-form>\n      <!-- 底部区域 -->\n      <span slot=\"footer\" class=\"dialog-footer\">\n    <el-button @click=\"editRoleDialogVisible = false\">取 消</el-button>\n    <el-button type=\"primary\" @click=\"editRole\">确 定</el-button>\n  </span>\n    </el-dialog>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Roles',\n  data () {\n    return {\n      // 所有角色列表数据\n      rolesList: [],\n      // 控制分配权限对话框的显示与隐藏\n      setRightDialogVisible: false,\n      // 所有权限数据\n      rightsList: [],\n      // 树形控件的属性绑定对象\n      treeProps: {\n        label: 'authName',\n        children: 'children'\n      },\n      // 默认选中的节点id值数组\n      defKeys: [],\n      // 当前即将分配权限的角色id\n      roleId: '',\n      // 控制添加角色对话框的显示与隐藏\n      addRoleDialogVisible: false,\n      // tianjia\n      addForm: {\n        roleName: '',\n        roleDesc: ''\n      },\n      addFormRules: {\n        roleName: [\n          {\n            required: true,\n            message: '请输入角色名称',\n            trigger: 'blur'\n          },\n          {\n            min: 2,\n            max: 6,\n            message: '角色名称长度在 2 到 6 个字符',\n            trigger: 'blur'\n          }\n        ],\n        roleDesc: [\n          {\n            required: true,\n            message: '请输入角色描述',\n            trigger: 'blur'\n          }\n        ]\n      },\n      editForm: {},\n      editRoleDialogVisible: false\n    }\n  },\n  created () {\n    this.getRolesList()\n  },\n  methods: {\n    /**\n     * 获取所有角色列表\n     */\n    async getRolesList () {\n      const { data: res } = await this.$http.get('roles')\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取角色列表失败!')\n      } else {\n        this.rolesList = res.data\n        console.log(this.rolesList)\n      }\n    },\n    /**\n     * 根据id删除对应的权限\n     * @param role\n     * @param roleId\n     */\n    async removeRightById (role, roleId) {\n      // 弹框提示用户是否要删除\n      const confirmResult = await this.$confirm('此操作将永久删除该权限, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch((err) => {\n        return err\n      })\n\n      if (confirmResult !== 'confirm') {\n        return this.$message.error('取消了删除')\n      } else {\n        // console.log('确认了删除')\n        const { data: res } = await this.$http.delete(`roles/${role.id}/rights/${roleId}`)\n        /**\n         * bug点: 这个 meta.status是一个 数字类型, 不是字符串\n         */\n        if (res.meta.status !== 200) {\n          return this.$message.error('删除权限失败!')\n        } else {\n          // this.getRolesList()\n          role.children = res.data\n          this.$message.success('删除权限成功!')\n        }\n      }\n    },\n    /**\n     * 展示分配权限对话框\n     * @param role\n     */\n    async showSetRightDialog (role) {\n      this.roleId = role.id\n      // 获取所有权限数据\n      const { data: res } = await this.$http.get('rights/tree')\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取权限数据失败!')\n      } else {\n        // 获取到权限数据保存到data中\n        this.rightsList = res.data\n        // 递归获取三级节点的Id\n        this.getLeafKeys(role, this.defKeys)\n\n        this.setRightDialogVisible = true\n        // console.log(this.rightsList)\n      }\n    },\n    /**\n     * 通过递归的形式, 获取角色下的所有三级权限的id, 并保存到defKeys数组中\n     * @param node\n     * @param arr\n     */\n    getLeafKeys (node, arr) {\n      // 如果当前node节点不包含 children 属性, 则是三级节点\n      if (!node.children) {\n        return arr.push(node.id)\n      }\n      node.children.forEach(item => {\n        this.getLeafKeys(item, arr)\n      })\n    },\n    /**\n     * 监听 分配权限对话框的关闭事件\n     */\n    setRightDialogClosed () {\n      this.defKeys = []\n    },\n    /**\n     * 点击为角色分配权限\n     */\n    async allotRights () {\n      /**\n       * ... 代表展开运算符\n       * ...this.$refs.treeRef.getCheckedKeys\n       */\n\n      /**\n       * bug点 : 出错地点 ...this.$refs.treeRef.getCheckedKeys,\n       * 原因:  少写了  getCheckedKeys() 后面的 括号. 出现了下面的错误信息\n       * [Vue warn]: Error in v-on handler (Promise/async): \"TypeError: Invalid attempt to spread non-iterable instance.\n       * In order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"\n       * #\n       * TypeError: Invalid attempt to spread non-iterable instance.\n       * In order to be iterable, non-array objects must have a [Symbol.iterator]() method.\n       */\n      const keys = [\n        ...this.$refs.treeRef.getCheckedKeys(),\n        ...this.$refs.treeRef.getHalfCheckedKeys()\n      ]\n      console.log(keys)\n\n      const idStr = keys.join(',')\n\n      const { data: res } = await this.$http.post(`roles/${this.roleId}/rights`, { rids: idStr })\n      if (res.meta.status !== 200) {\n        return this.$message.error('分配权限失败!')\n      } else {\n        this.getRolesList()\n        this.setRightDialogVisible = false\n        return this.$message.success('分配权限成功!')\n      }\n    },\n    /**\n     * 添加角色\n     */\n    async addRole () {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) {\n          return\n        }\n        // 可以发起添加角色的网络请求\n        const { data: res } = await this.$http.post('roles', this.addForm)\n        console.log(res)\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加角色失败!')\n        } else {\n          this.addRoleDialogVisible = false\n          this.getRolesList()\n          this.$message.success('添加角色成功!')\n        }\n      })\n    },\n    /**\n     * 监听 添加角色对话框的关闭事件\n     */\n    addDialogClosed () {\n      this.$refs.addFormRef.resetFields()\n    },\n    /**\n     * 编辑角色\n     */\n    async editRole () {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) {\n          return\n        }\n        const { data: res } = await this.$http.put(`roles/${this.editForm.roleId}`,\n          {\n            roleName: this.editForm.roleName,\n            roleDesc: this.editForm.roleDesc\n          }\n        )\n        if (res.meta.status !== 200) {\n          this.$message.error('更新角色信息失败!')\n        } else {\n          this.editRoleDialogVisible = false\n          this.getRolesList()\n          this.$message.success('更新角色成功!')\n        }\n      })\n    },\n    /**\n     * 展示编辑角色的对话框\n     * @param roleId\n     */\n    async showEditDialog (roleId) {\n      const { data: res } = await this.$http.get(`roles/${roleId}`)\n      if (res.meta.status !== 200) {\n        return this.$message.error('查询角色信息失败')\n      } else {\n        this.editForm = res.data\n        this.editRoleDialogVisible = true\n      }\n    },\n    /**\n     * 根据角色id删除角色\n     * @param roleId\n     */\n    async removeRoleById (roleId) {\n      // 弹框询问用户是否直接删除数据\n      const confirmResult = await this.$confirm('此操作将永久删除该角色, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        })\n      })\n\n      if (confirmResult === 'confirm') {\n        console.log('确认了删除')\n        const { data: res } = await this.$http.delete(`roles/${roleId}`)\n        if (res.meta.status !== 200) {\n          return this.$message.error('删除角色失败!')\n        } else {\n          this.getRolesList()\n          return this.$message.success('删除角色成功!')\n        }\n      }\n    },\n    /**\n     * 监听 修改角色对话框的关闭事件\n     */\n    editDialogClosed () {\n      this.$refs.editFormRef.resetFields()\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.el-tag {\n  margin: 7px;\n}\n\n.bd-top {\n  border-top: 1px solid #eee;\n}\n\n.bd-bottom {\n  border-bottom: 1px solid #eee;\n}\n\n.vcenter {\n  display: flex;\n  align-items: center;\n}\n</style>\n"]}]}