{"remainingRequest":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/goods/Cate.vue?vue&type=style&index=0&id=90a0ced0&lang=less&scoped=true&","dependencies":[{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/goods/Cate.vue","mtime":1644935477432},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/less-loader/dist/cjs.js","mtime":1644937355957},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudHJlZS10YWJsZSB7CiAgbWFyZ2luLXRvcDogMTVweDsKICBmb250LXNpemU6IDEzcHg7Cn0KCi5lbC1jYXNjYWRlciB7CiAgd2lkdGg6IDEwMCU7Cn0K"},{"version":3,"sources":["Cate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6WA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Cate.vue","sourceRoot":"src/components/goods","sourcesContent":["<template>\n  <div>\n    <!--面包屑导航区域-->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!--卡片视图区域-->\n    <el-card>\n      <el-row>\n        <el-col>\n          <el-button type=\"primary\" @click=\"showAddCateDialog\">添加分类</el-button>\n        </el-col>\n      </el-row>\n      <!--  表格区域-->\n      <tree-table v-loading=\"!cateList.length\"\n                  :columns=\"cateColumns\"\n                  :data=\"cateList\"\n                  :expand-type=\"false\"\n                  :selection-type=\"false\"\n                  :show-index=\"true\"\n                  :show-row-hover=\"true\"\n                  border\n                  class=\"tree-table\"\n                  element-loading-text=\"拼命加载中\"\n                  index-text=\"#\">\n        <!-- 第一个模板: 是否有效-->\n        <template slot=\"isOk\" slot-scope=\"scope\">\n          <i v-if=\"scope.row.cat_deleted === false\"\n             class=\"el-icon-success\"\n             style=\"color: lightgreen\"></i>\n          <i v-else class=\"el-icon-error\" style=\"color: red\"></i>\n        </template>\n\n        <!-- 第二个模板: 排序-->\n        <template slot=\"order\" slot-scope=\"scope\">\n          <el-tag v-if=\"scope.row.cat_level === 0\" size=\"mini\">一级</el-tag>\n          <el-tag v-else-if=\"scope.row.cat_level === 1\" size=\"mini\" type=\"success\">二级</el-tag>\n          <el-tag v-else size=\"mini\" type=\"warning\">三级</el-tag>\n        </template>\n\n        <!-- 第二个模板: 操作-->\n        <template slot=\"opt\" slot-scope=\"scope\">\n          <el-button icon=\"el-icon-edit\" size=\"mini\" type=\"primary\" @click=\"showEditDialog(scope.row.cat_id)\">编辑\n          </el-button>\n          <el-button icon=\"el-icon-delete\" size=\"mini\" type=\"danger\" @click=\"removeCateById(scope.row.cat_id)\">删除\n          </el-button>\n        </template>\n      </tree-table>\n\n      <!--  分页区域-->\n      <el-pagination\n        :current-page=\"this.queryInfo.pagenum\"\n        :page-size=\"this.queryInfo.pagesize\"\n        :page-sizes=\"[3,5,10,15]\"\n        :total=\"this.total\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\">\n      </el-pagination>\n    </el-card>\n\n    <!-- 添加分类的对话框 -->\n    <el-dialog :visible.sync=\"addCateDialogVisible\" title=\"添加分类\" @close=\"addCateDialogClosed\">\n      <el-form ref=\"addCateFormRef\" :model=\"addCateForm\" label-width=\"100px\">\n        <el-form-item label=\"分类名称: \" prop=\"cat_name\">\n          <el-input v-model=\"addCateForm.cat_name\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"父级分类: \">\n          <!-- options 用来指定数据源\n          cascadeProps 用来指定配置对象\n          -->\n          <el-cascader\n            v-model=\"selectedKeys\"\n            :change-on-select=\"true\"\n            :options=\"parentCateList\"\n            :props=\"cascadeProps\"\n            clearable\n            @change=\"parentCateChanged\"></el-cascader>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addCateDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addCate\">确 定</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 修改分类的对话框 -->\n    <el-dialog :visible.sync=\"editCateDialogVisible\" title=\"修改分类\" @close=\"editCateDialogClosed\">\n      <el-form ref=\"editCateFormRef\" :model=\"editCateForm\" label-width=\"100px\">\n        <el-form-item label=\"分类名称: \" prop=\"cat_name\">\n          <el-input v-model=\"editCateForm.cat_name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editCateDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"editCate\">确 定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Cate',\n  data () {\n    return {\n      // 查询条件\n      queryInfo: {\n        type: 3,\n        pagenum: 1,\n        pagesize: 5\n      },\n      // 商品分类的数据列表, 默认为空\n      cateList: [],\n      // 总数据条数\n      total: 0,\n      // 为table指定列的定义\n      cateColumns: [\n        {\n          label: '分类名称',\n          prop: 'cat_name'\n        },\n        {\n          label: '是否有效',\n          // 表示, 将当前列定义为模板列\n          type: 'template',\n          // 表示当前列使用模板名称\n          template: 'isOk'\n        },\n        {\n          label: '排序',\n          // 表示, 将当前列定义为模板列\n          type: 'template',\n          // 表示当前列使用模板名称\n          template: 'order'\n        },\n        {\n          label: '操作',\n          // 表示, 将当前列定义为模板列\n          type: 'template',\n          // 表示当前列使用模板名称\n          template: 'opt'\n        }\n      ],\n      // 控制添加分类对话框的显示与隐藏\n      addCateDialogVisible: false,\n      // 添加分类的表单数据对象\n      addCateForm: {\n        // 将要添加的分类的名称\n        cat_name: '',\n        // 父级分类的Id\n        cat_pid: 0,\n        // 分类的等级, 默认要添加的是一级分类\n        cat_level: 0\n      },\n      // 添加分类表单的校验规则对象\n      addCateFormRules: {\n        cat_name: [{\n          required: true,\n          message: '请输入分类名称',\n          trigger: 'blur'\n        }]\n      },\n      // 父级分类的列表\n      parentCateList: [],\n      // 指定级联选择器的配置对象\n      cascadeProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children',\n        // 从el-cascader标签的属性,中移动到这个cascadeProps中\n        expandTrigger: 'hover'\n      },\n      // 选中的父级分类的Id数组\n      selectedKeys: [],\n      // 控制修改分类对话框的显示与隐藏\n      editCateDialogVisible: false,\n      // 修改分类的表单数据对象\n      editCateForm: {}\n    }\n  },\n  created () {\n    this.getCateList()\n  },\n  methods: {\n    /**\n     * 获取所有商品分类\n     */\n    async getCateList () {\n      const { data: res } = await this.$http.get('categories', { params: this.queryInfo })\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取商品分类失败!')\n      } else {\n        // 把数据列表, 赋值给cateList\n        this.cateList = res.data.result\n        // 为总数据条数赋值\n        this.total = res.data.total\n        console.log(this.cateList)\n        // return this.$message.success('')\n      }\n    },\n    /**\n     * 监听pagesize改变\n     */\n    handleSizeChange (newSize) {\n      this.queryInfo.pagesize = newSize\n      this.getCateList()\n    },\n    /**\n     * 监听pagenum改变\n     * @param newPage\n     */\n    handleCurrentChange (newPage) {\n      this.queryInfo.pagenum = newPage\n      this.getCateList()\n    },\n    /**\n     * 点击按钮, 展示\n     */\n    showAddCateDialog () {\n      // 先获取父级分类的数据列表\n      this.getParentCateList()\n      // 再展示出对话框\n      this.addCateDialogVisible = true\n    },\n    /**\n     * 获取父级分类的数据列表\n     */\n    async getParentCateList () {\n      // type : 2 表示实现两层的分类列表, 例如  大家电 -> 电视\n      const { data: res } = await this.$http.get('categories', {\n        params: { type: 2 }\n      })\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取父级数据失败!')\n      }\n      this.parentCateList = res.data\n    },\n    /**\n     * 选择项发生变化触发这个函数\n     */\n    parentCateChanged () {\n      console.log(this.selectedKeys)\n      // 如果 selectedKeys数组中的length 大于 0, 证明选中的父级分类\n      // 反之, 就说明没有选中任何父级分类\n      if (this.selectedKeys.length > 0) {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = this.selectedKeys[this.selectedKeys.length - 1]\n        // 为当前分类的等级赋值\n        this.addCateForm.cat_level = this.selectedKeys.length\n      } else {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = 0\n        // 为当前分类的等级赋值\n        this.addCateForm.cat_level = 0\n      }\n    },\n    /**\n     * 点击按钮, 添加新的分类\n     */\n    async addCate () {\n      // console.log(this.addCateForm)\n      this.$refs.addCateFormRef.validate(async valid => {\n        if (!valid) return\n        const { data: res } = await this.$http.post('categories', this.addCateForm)\n\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加分类失败')\n        } else {\n          this.addCateDialogVisible = false\n          this.getCateList()\n          this.$message.success('添加分类成功')\n        }\n      })\n    },\n    /**\n     * 监听对话框的关闭事件, 重置表单数据\n     */\n    addCateDialogClosed () {\n      this.$refs.addCateFormRef.resetFields()\n      /**\n       * 注意点: 重置下拉框和表单里面的数据!!!\n       * @type {*[]}\n       */\n      this.selectedKeys = []\n      this.addCateForm.cat_level = 0\n      this.addCateForm.cat_pid = 0\n    },\n    /**\n     * 根据分类id删除分类\n     * @param id\n     */\n    async removeCateById (id) {\n      // 弹框询问用户是否直接删除数据\n      const confirmResult = await this.$confirm('此操作将永久删除该分类, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        })\n      })\n      if (confirmResult === 'confirm') {\n        console.log('确认了删除')\n        const { data: res } = await this.$http.delete(`categories/${id}`)\n        if (res.meta.status !== 200) {\n          return this.$message.error('删除分类失败!')\n        } else {\n          this.getCateList()\n          return this.$message.success('删除分类成功!')\n        }\n      }\n    },\n    /**\n     * 展现修改对话框的显示与隐藏\n     * @param id\n     */\n    async showEditDialog (id) {\n      const { data: res } = await this.$http.get(`categories/${id}`)\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取分类失败')\n      } else {\n        this.editCateForm = res.data\n        this.editCateDialogVisible = true\n      }\n    },\n    /**\n     * 编辑分类\n     */\n    async editCate () {\n      this.$refs.editCateFormRef.validate(async valid => {\n        if (!valid) {\n          return\n        }\n        const { data: res } = await this.$http.put(`categories/${this.editCateForm.cat_id}`,\n          {\n            cat_name: this.editCateForm.cat_name\n          }\n        )\n        if (res.meta.status !== 200) {\n          this.$message.error('更新分类失败!')\n        } else {\n          this.editCateDialogVisible = false\n          this.getCateList()\n          this.$message.success('更新分类成功!')\n        }\n      })\n    },\n    /**\n     * 监听 修改分类对话框的关闭事件\n     */\n    editCateDialogClosed () {\n      this.$refs.editCateFormRef.resetFields()\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n\n.tree-table {\n  margin-top: 15px;\n  font-size: 13px;\n}\n\n.el-cascader {\n  width: 100%;\n}\n</style>\n"]}]}