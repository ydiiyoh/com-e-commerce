{"remainingRequest":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/goods/Params.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/goods/Params.vue","mtime":1644935477432},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Params.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Params.vue","sourceRoot":"src/components/goods","sourcesContent":["<template>\n  <div>\n    <!--面包屑导航区域-->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>分类参数</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!--卡片视图区域-->\n    <el-card>\n      <!--警告区域-->\n      <el-alert\n        :closable=\"false\"\n        show-icon\n        title=\"注意: 只允许为三级分类设置相关参数!\"\n        type=\"warning\">\n      </el-alert>\n\n      <!--  选择商品分类区域 -->\n      <el-row class=\"cat_opt\">\n        <el-col>\n          <span>选择商品分类: </span>\n          <!-- 选择商品分类的级联选择框 -->\n          <el-cascader\n            v-model=\"selectedKeys\"\n            :options=\"cateList\"\n            :props=\"cateProps\"\n            clearable\n            expand-trigger=\"hover\"\n            @change=\"handleChange\"></el-cascader>\n        </el-col>\n      </el-row>\n\n      <!-- tab页签区域 -->\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleTabClick\">\n        <!-- 添加动态参数的面板 -->\n        <el-tab-pane label=\"动态参数\" name=\"many\">\n          <!-- 添加参数按钮\n            注意: disabled返回值是一个TRUE/FALSE, 所以需要 v-bind:disabled 属性绑定\n          -->\n          <el-button :disabled=\"isBtnDisabled\" size=\"mini\" type=\"primary\" @click=\"addDialogVisible= true\">添加参数\n          </el-button>\n          <!-- 动态参数表格 -->\n          <el-table v-loading=\"manyTableLoading\"\n                    :data=\"manyTableData\"\n                    border\n                    element-loading-text=\"拼命加载中\"\n                    stripe>\n            <el-table-column type=\"expand\">\n              <!-- 作用域插槽-->\n              <template slot-scope=\"scope\">\n                <!-- 循环渲染Tag标签 -->\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i,scope.row)\">\n                  {{ item }}\n                </el-tag>\n                <!-- 输入的文本框-->\n                <el-input\n                  v-if=\"scope.row.inputVisible\"\n                  ref=\"saveTagInput\"\n                  v-model=\"scope.row.inputValue\"\n                  class=\"input-new-tag\"\n                  size=\"small\"\n                  @blur=\"handleInputConfirm(scope.row)\"\n                  @keyup.enter.native=\"handleInputConfirm(scope.row)\">\n                </el-input>\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag\n                </el-button>\n              </template>\n            </el-table-column>\n            <!--索引列-->\n            <el-table-column label=\"#\" type=\"index\"></el-table-column>\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template slot-scope=\"scope\">\n                <el-button icon=\"el-icon-edit\" size=\"mini\" type=\"primary\" @click=\"showEditDialog(scope.row)\">编辑\n                </el-button>\n                <el-button icon=\"el-icon-delete\" size=\"mini\" type=\"danger\" @click=\"removeParams(scope.row.attr_id)\">删除\n                </el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n        <!-- 添加静态属性的面板 -->\n        <el-tab-pane label=\"静态属性\" name=\"only\">\n          <!-- 添加属性按钮-->\n          <el-button :disabled=\"isBtnDisabled\" size=\"mini\" type=\"primary\" @click=\"addDialogVisible = true\">添加属性\n          </el-button>\n          <!-- 静态属性表格 -->\n          <el-table v-loading=\"onlyTableLoading\"\n                    :data=\"onlyTableData\"\n                    border\n                    element-loading-text=\"拼命加载中\"\n                    stripe>\n            <!--展开行-->\n            <el-table-column type=\"expand\">\n              <!-- 作用域插槽-->\n              <template slot-scope=\"scope\">\n                <!-- 循环渲染Tag标签 -->\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i,scope.row)\">\n                  {{ item }}\n                </el-tag>\n                <!-- 输入的文本框-->\n                <el-input\n                  v-if=\"scope.row.inputVisible\"\n                  ref=\"saveTagInput\"\n                  v-model=\"scope.row.inputValue\"\n                  class=\"input-new-tag\"\n                  size=\"small\"\n                  @blur=\"handleInputConfirm(scope.row)\"\n                  @keyup.enter.native=\"handleInputConfirm(scope.row)\">\n                </el-input>\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag\n                </el-button>\n              </template>\n            </el-table-column>\n            <!--索引列-->\n            <el-table-column label=\"#\" type=\"index\"></el-table-column>\n            <el-table-column label=\"属性名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template slot-scope=\"scope\">\n                <el-button icon=\"el-icon-edit\" size=\"mini\" type=\"primary\" @click=\"showEditDialog(scope.row)\">编辑\n                </el-button>\n                <el-button icon=\"el-icon-delete\" size=\"mini\" type=\"danger\" @click=\"removeParams(scope.row.attr_id)\">删除\n                </el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n      </el-tabs>\n    </el-card>\n\n    <!-- 添加参数对话框-->\n    <el-dialog :title=\"\n                '添加' + this.titleText\"\n               :visible.sync=\"addDialogVisible\"\n               width=\"35%\"\n               @close=\"addDialogClosed\">\n      <el-form ref=\"addFormRef\" :model=\"addForm\" :rules=\"addFormRules\" label-width=\"100px\">\n        <el-form-item :label=\"this.titleText\" prop=\"attr_name\">\n          <el-input v-model=\"addForm.attr_name\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addParams\">确 定</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 添加修改对话框-->\n    <el-dialog :title=\"'修改' + this.titleText\"\n               :visible.sync=\"editDialogVisible\"\n               width=\"35%\"\n               @close=\"editDialogClosed\">\n      <el-form ref=\"editFormRef\" :model=\"editForm\" :rules=\"addFormRules\" label-width=\"100px\">\n        <el-form-item :label=\"this.titleText\" prop=\"attr_name\">\n          <el-input v-model=\"editForm.attr_name\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"editParams\">确 定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Params',\n  data () {\n    return {\n      // 商品分类列表\n      cateList: [],\n      // 级联选择框双向绑定到的数组\n      selectedKeys: [],\n      cateProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children',\n        // 从el-cascader标签的属性,中移动到这个cascadeProps中\n        expandTrigger: 'hover'\n      },\n      // 被激活的页签的名称\n      activeName: 'many',\n      // 动态参数的数据\n      manyTableData: [],\n      // 静态参数的数据\n      onlyTableData: [],\n      // 控制添加对话框的显示与隐藏\n      addDialogVisible: false,\n      // 控制修改对话框的显示与隐藏\n      editDialogVisible: false,\n      // 添加参数的表单对象\n      addForm: {\n        attr_name: ''\n      },\n      // 添加表单的校验规则对象\n      addFormRules: {\n        attr_name: [\n          {\n            required: true,\n            message: '请输入参数名称',\n            trigger: 'blur'\n          }\n        ]\n      },\n      // 修改参数的表单对象\n      editForm: {},\n      onlyTableLoading: false,\n      manyTableLoading: false\n    }\n  },\n  created () {\n    this.getCategories()\n  },\n  computed: {\n    // 如果按钮需要被警用, 则返回TRUE, 否则返回FALSE\n    isBtnDisabled () {\n      return this.selectedKeys.length !== 3\n    },\n    // 当前选中的三级分裂Id\n    cateId () {\n      if (this.selectedKeys.length === 3) {\n        return this.selectedKeys[2]\n      }\n      return null\n    },\n    // 动态计算标题文本\n    titleText () {\n      if (this.activeName === 'many') {\n        return '动态参数'\n      } else {\n        return '静态属性'\n      }\n    }\n  },\n  methods: {\n    /**\n     * 获取所有商品列表\n     */\n    async getCategories () {\n      const { data: res } = await this.$http.get('categories')\n      if (res.meta.status !== 200) {\n        this.$message.error('获取商品分类失败!')\n      }\n      this.cateList = res.data\n      console.log(this.cateList)\n    },\n    /**\n     * 级联选择框选中项变化, 会触发这个函数\n     */\n    handleChange () {\n      this.getParamsData()\n    },\n    /**\n     * tab页面点击事件的处理函数\n     */\n    handleTabClick () {\n      console.log(this.activeName)\n      this.getParamsData()\n    },\n    /**\n     * 获取参数的列表数据\n     */\n    async getParamsData () {\n      // 证明选中的不是三级分类\n      if (this.selectedKeys.length !== 3) {\n        this.selectedKeys = []\n        this.manyTableData = []\n        this.onlyTableData = []\n      } else {\n        // 证明是三级分类\n        console.log(this.selectedKeys)\n        // if (this.activeName === 'many') {\n        //   this.manyTableLoading = true\n        // } else {\n        //   this.onlyTableLoading = true\n        // }\n        // 这里判断下当前激活的页签名称\n        // 使用es6语法的属性表达式 + 模板字符串, 优雅解决上面判断问题\n        this[`${this.activeName}TableLoading`] = true\n\n        // 然后在发起请求, 根据所选分类的Id, 和当前所处的面板, 获取对应的参数\n        const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, {\n          params: { sel: this.activeName }\n        })\n        if (res.meta.status !== 200) {\n          return this.$message.error('获取参数列表失败')\n        } else {\n          console.log(res.data)\n\n          /**\n           * 注意: ''.split(' ') 空字符串切分的时候, 会获得只有一个空串的数组 [\"\"]\n           */\n          res.data.forEach(item => {\n            // 三元表达式\n            item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []\n            // 控制输入框与按钮的切换形式\n            item.inputVisible = false\n            // 文本框中输入的值\n            item.inputValue = ''\n          })\n\n          // 请求只会发起一次请求, 但是结果有两种情况, 所以需要进行判断处理\n          // if (this.activeName === 'many') {\n          //   this.manyTableData = res.data\n          // } else {\n          //   this.onlyTableData = res.data\n          // }\n          this[`${this.activeName}TableData`] = res.data\n          this[`${this.activeName}TableLoading`] = false\n        }\n      }\n    },\n    /**\n     * 监听添加对话框的关闭事件\n     */\n    addDialogClosed () {\n      this.$refs.addFormRef.resetFields()\n    },\n    /**\n     * 点击按钮, 添加参数\n     */\n    addParams () {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) {\n\n        } else {\n          const { data: res } = await this.$http.post(`categories/${this.cateId}/attributes`, {\n            attr_name: this.addForm.attr_name,\n            attr_sel: this.activeName\n          })\n          if (res.meta.status !== 201) {\n            return this.$message.error('添加参数失败!')\n          } else {\n            this.getParamsData()\n            this.addDialogVisible = false\n            return this.$message.success('添加参数成功!')\n          }\n        }\n      })\n    },\n    /**\n     * 显示修改对话框的事件\n     *@param row\n     */\n    async showEditDialog (row) {\n      /**\n       * bug点: 错误写法 `categories/${this.cateId}/attributes/${this.row.attr_id}`\n       * row中加上了 this关键字, 这样的话 this引用的是 data(){} 中的row数据对象, 而不是形参row\n       * 小结: 这个this关键字, 不引用data(){}, 不要随便乱加上\n       */\n      const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes/${row.attr_id}`,\n        { params: { attr_sel: this.activeName } })\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取参数信息失败')\n      } else {\n        this.editForm = res.data\n        console.log(this.editForm)\n        this.editDialogVisible = true\n      }\n    },\n    /**\n     * 监听修改对话框的关闭事件\n     */\n    editDialogClosed () {\n      this.$refs.editFormRef.resetFields()\n    },\n    /**\n     * 点击按钮, 修改参数\n     */\n    editParams () {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) {\n          return this.$message.error('校验不通过, 请重新输入')\n        } else {\n          const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${this.editForm.attr_id}`, {\n            attr_name: this.editForm.attr_name,\n            attr_sel: this.activeName\n          })\n          if (res.meta.status !== 200) {\n            return this.$message.error('更新参数失败!')\n          } else {\n            this.editDialogVisible = false\n            this.getParamsData()\n            return this.$message.success('更新参数成功!')\n          }\n        }\n      })\n    },\n    /**\n     * 根据Id删除对应的 参数/属性\n     * @param attrId\n     */\n    async removeParams (attrId) {\n      // 弹框询问用户是否删除数据\n      const confirmResult = await this.$confirm(`此操作将永久删除该${this.titleText}, 是否继续?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch(err => {\n        return err\n      })\n      if (confirmResult !== 'confirm') {\n        return this.$message.info('已取消删除!')\n      } else {\n        const { data: res } = await this.$http.delete(`categories/${this.cateId}/attributes/${attrId}`)\n        if (res.meta.status !== 200) {\n          return this.$message.error(`删除${this.titleText}失败!`)\n        } else {\n          this.getParamsData()\n          return this.$message.success(`删除${this.titleText}成功!`)\n        }\n      }\n    },\n    /**\n     * 文本框失去焦点, 或按下enter都会触发\n     * @param row\n     */\n    handleInputConfirm (row) {\n      if (row.inputValue.trim().length === 0) {\n        row.inputVisible = false\n        row.inputValue = ''\n        return\n      }\n      // 如果没有return, 这里证明输入的内容, 需要做后序处理\n      row.attr_vals.push(row.inputValue.trim())\n      row.inputValue = ''\n      row.inputVisible = false\n      // 发起请求, 保存这次操作\n      this.saveAttrVals(row)\n    },\n    /**\n     *点击按钮, 展示文本输入框\n     * @param row\n     */\n    showInput (row) {\n      row.inputVisible = true\n      // 让文本框自动获取焦点\n      // $nextTick方法的作用, 就是放页面上元素被重新渲染之后, 才会指定回调函数中的代码\n      this.$nextTick(_ => {\n        this.$refs.saveTagInput.$refs.input.focus()\n      })\n    },\n    /**\n     * 删除对应的参数可选项\n     * @param index\n     * @param row\n     */\n    handleClose (index, row) {\n      row.attr_vals.splice(index, 1)\n      this.saveAttrVals(row)\n    },\n    /**\n     * 将对 attr_vals的操作保存到数据库\n     * @param row\n     */\n    async saveAttrVals (row) {\n      const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${row.attr_id}`, {\n        attr_name: row.attr_name,\n        attr_sel: this.activeName,\n        attr_vals: row.attr_vals.join(' ')\n      })\n      if (res.meta.status !== 200) {\n        return this.$message.error('修改参数项失败!')\n      } else {\n        this.$message.success('修改参数项成功!')\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.cat_opt {\n  margin: 15px 0;\n}\n\n.el-tag + .el-tag {\n  margin-left: 10px;\n}\n\n.button-new-tag {\n  margin-left: 10px;\n  height: 32px;\n  line-height: 30px;\n  padding-top: 0;\n  padding-bottom: 0;\n}\n\n.input-new-tag {\n  width: 90px;\n  margin-left: 10px;\n  vertical-align: bottom;\n}\n</style>\n"]}]}