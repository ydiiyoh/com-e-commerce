{"remainingRequest":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/goods/Add.vue?vue&type=style&index=0&id=8de88330&lang=less&scoped=true&","dependencies":[{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/src/components/goods/Add.vue","mtime":1644935477432},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/less-loader/dist/cjs.js","mtime":1644937355957},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/blackdoctor/Downloads/0_code/web_code/com-e-commerce/vue_project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLWNoZWNrYm94IHsKICAvLyBtYXJnaW4g5LiKIOWPsyDkuIsg5bemCiAgbWFyZ2luOiAwIDE1cHggMCAwICFpbXBvcnRhbnQ7Cn0KCi5idG5BZGQgewogIG1hcmdpbi10b3A6IDE1cHg7Cn0KCi5wcmV2aWV3SW1nIHsKICB3aWR0aDogMTAwJTsKfQo="},{"version":3,"sources":["Add.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiXA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"Add.vue","sourceRoot":"src/components/goods","sourcesContent":["<template>\n  <div>\n    <!--面包屑导航区域-->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>添加商品</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!--卡片视图-->\n    <el-card>\n      <!-- 提示区域 -->\n      <el-alert\n        :closable=\"false\"\n        center\n        show-icon\n        title=\"添加商品信息\"\n        type=\"info\">\n      </el-alert>\n\n      <!--步骤条区域-->\n      <el-steps :active=\"activeIndex - 0\" :space=\"200\" align-center finish-status=\"success\">\n        <el-step title=\"基本信息\"></el-step>\n        <el-step title=\"商品参数\"></el-step>\n        <el-step title=\"商品属性\"></el-step>\n        <el-step title=\"商品图片\"></el-step>\n        <el-step title=\"商品内容\"></el-step>\n        <el-step title=\"完成\"></el-step>\n      </el-steps>\n\n      <!-- 注意一下嵌套规则, 表格form嵌套tabs-->\n      <el-form ref=\"addFormRef\" :model=\"addForm\" :rules=\"addFormRules\" label-position=\"top\" label-width=\"100px\">\n        <!-- tab栏区域\n          before-leave: 切换标签之前的钩子函数, 若发挥FALSE或返回Promise且被reject, 则阻止切换\n                        类型  Function(activeName, oldActiveName)\n        -->\n        <el-tabs v-model=\"activeIndex\" :before-leave=\"beforeTabLeave\"\n                 :tab-position=\"tabPosition\" @tab-click=\"tabClicked\">\n          <el-tab-pane label=\"基本信息\" name=\"0\">\n            <!-- 在Form组件中, 每个表单域由一个Form-Item组件构成, 表单域中可以放置各种类型的表单控件,\n                包括Input, Select, CheckBox, Radio, Switch, DatePicker, TimePicker\n            -->\n            <el-form-item label=\"商品名称\" prop=\"goods_name\">\n              <el-input v-model=\"addForm.goods_name\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品价格\" prop=\"goods_price\">\n              <el-input v-model=\"addForm.goods_price\" type=\"number\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品重量\" prop=\"goods_weight\">\n              <el-input v-model=\"addForm.goods_weight\" type=\"number\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品数量\" prop=\"goods_number\">\n              <el-input v-model=\"addForm.goods_number\" type=\"number\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品分类\" prop=\"goods_cat\">\n              <!--  选择商品分类区域 -->\n              <el-row>\n                <el-col>\n                  <!-- 选择商品分类的级联选择框 -->\n                  <el-cascader\n                    v-model=\"addForm.goods_cat\"\n                    :options=\"cateList\"\n                    :props=\"cateProps\"\n                    clearable\n                    @change=\"handleChange\"></el-cascader>\n                </el-col>\n              </el-row>\n            </el-form-item>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品参数\" name=\"1\">\n            <!--渲染表单的Item项-->\n            <el-form-item v-for=\"(item) in manyTableData\" :key=\"item.attr_id\" :label=\"item.attr_name\">\n              <!--复选框组-->\n              <el-checkbox-group v-model=\"item.attr_vals\">\n                <el-checkbox v-for=\"(cb,i)  in item.attr_vals\" :key=\"i\" :label=\"cb\" border size=\"small\"></el-checkbox>\n              </el-checkbox-group>\n            </el-form-item>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品属性\" name=\"2\">\n            <el-form-item v-for=\"(item) in onlyTableData\" :key=\"item.attr_id\" :label=\"item.attr_name\">\n              <el-input v-model=\"item.attr_vals\"></el-input>\n            </el-form-item>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品图片\" name=\"3\">\n            <!-- action 表示图片要上传到后台的API地址\n                :on-success-->\n            <el-upload\n              :action=\"uploadUrl\"\n              :headers=\"headerObj\"\n              :on-preview=\"handlePreview\"\n              :on-remove=\"handleRemove\"\n              :on-success=\"handleSuccess\"\n              class=\"upload-demo\"\n              list-type=\"picture\">\n              <el-button size=\"small\" type=\"primary\">点击上传</el-button>\n            </el-upload>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品内容\" name=\"4\">\n            <!-- 富文本编辑器组件-->\n            <quill-editor v-model=\"addForm.goods_introduce\">\n            </quill-editor>\n            <!--添加商品的按钮-->\n            <el-button class=\"btnAdd\" type=\"primary\" @click=\"add\">添加商品</el-button>\n          </el-tab-pane>\n        </el-tabs>\n      </el-form>\n    </el-card>\n\n    <!-- 图片预览 -->\n    <el-dialog\n      :visible.sync=\"previewVisible\"\n      title=\"图片预览\"\n      width=\"50%\">\n      <img :src=\"previewPath\" alt=\"#\" class=\"previewImg\">\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport _ from 'lodash'\n\nexport default {\n  name: 'Add',\n  data () {\n    return {\n      activeIndex: '0',\n      // 选项卡所在的位置\n      tabPosition: 'left',\n      // 添加商品的表单对象\n      addForm: {\n        goods_name: '',\n        // 商品所属的分类数组\n        goods_cat: [],\n        goods_price: 0,\n        goods_number: 0,\n        goods_weight: 0,\n        // 商品的详情描述\n        goods_introduce: '',\n        // 上传的图片临时路径\n        pics: [],\n        attrs: []\n      },\n      // 添加商品的表单校验对象\n      addFormRules: {\n        goods_name: [\n          {\n            required: true,\n            message: '请输入商品名称',\n            trigger: 'blur'\n          }\n        ],\n        goods_price: [\n          {\n            required: true,\n            message: '请输入商品价格',\n            trigger: 'blur'\n          }\n        ],\n        goods_weight: [\n          {\n            required: true,\n            message: '请输入商品重量',\n            trigger: 'blur'\n          }\n        ],\n        goods_number: [\n          {\n            required: true,\n            message: '请输入商品数量',\n            trigger: 'blur'\n          }\n        ],\n        goods_cat: [\n          {\n            required: true,\n            message: '请输入商品分类',\n            trigger: 'blur'\n          }\n        ]\n      },\n      // 商品列表数据\n      cateList: [],\n      // 为 options数据源, 配置键名 [选项标签名label / 选项标签对的值value]\n      cateProps: {\n        // 指定选项标签的值: 选项对象的某个属性值\n        label: 'cat_name',\n        // 指定选项的值: 选项对象的某个属性值\n        value: 'cat_id',\n        // 指定选项的子选项\n        children: 'children',\n        // 从el-cascader标签的属性,中移动到这个cascadeProps中\n        expandTrigger: 'hover'\n      },\n      // 动态参数列表数据\n      manyTableData: [],\n      // 动态参数列表数据\n      onlyTableData: [],\n      // 上传图片的url\n      uploadUrl: 'http://127.0.0.1:8888/api/private/v1/upload',\n      // 图片上传组件的headers请求头对象\n      headerObj: {\n        Authorization:\n          window.sessionStorage.getItem('token')\n      },\n      previewPath: '',\n      previewVisible: false\n    }\n  },\n  created () {\n    this.getCateList()\n  },\n  computed: {\n    cateId () {\n      if (this.addForm.goods_cat.length === 3) {\n        return this.addForm.goods_cat[2]\n      }\n      return null\n    }\n  },\n  methods: {\n    async getCateList () {\n      const { data: res } = await this.$http.get('categories')\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取商品列表失败!')\n      }\n\n      this.cateList = res.data\n      console.log(this.cateList)\n    },\n    /**\n     *\n     */\n    handleChange () {\n      console.log(this.addForm.goods_cat)\n      if (this.addForm.goods_cat.length !== 3) {\n        this.addForm.goods_cat = []\n        return\n      }\n      // todo\n    },\n    /**\n     * 阻止标签页的切换\n     */\n    beforeTabLeave (activeName, oldActiveName) {\n      // console.log('即将离开的标签也名字是' + oldActiveName)\n      // console.log('即将进入的标签也名字是' + activeName)\n      if (oldActiveName === '0' && this.addForm.goods_cat.length !== 3) {\n        this.$message.error('请先选择商品分类!')\n        return false\n      }\n      return true\n    },\n    /**\n     *\n     */\n    async tabClicked () {\n      // console.log(this.activeIndex)\n      // 证明访问的是动态参数面板\n      if (this.activeIndex === '1') {\n        console.log('动态参数列表')\n        const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, {\n          params: { sel: 'many' }\n        })\n        if (res.meta.status !== 200) {\n          return this.$message.error('获取动态参数列表失败!')\n        }\n        res.data.forEach(item => {\n          item.attr_vals = item.attr_vals.length === 0 ? [] : item.attr_vals.split(' ')\n        })\n\n        this.manyTableData = res.data\n      } else if (this.activeIndex === '2') {\n        console.log('静态属性列表')\n        const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, {\n          params: { sel: 'only' }\n        })\n        if (res.meta.status !== 200) {\n          return this.$message.error('获取静态属性列表失败!')\n        }\n        this.onlyTableData = res.data\n        console.log(this.onlyTableData)\n        // todo\n      }\n    },\n    /**\n     * 处理移除图片的操作\n     */\n    handleRemove (file, fileList) {\n      console.log(file, fileList)\n\n      // 1.获取将要删除的图片的临时路径\n      const filePath = file.response.data.tmp_path\n      // 2.从pics数组中, 找到这个图片对应的索引值\n      const index = this.addForm.pics.findIndex(item => {\n        return item.pic === filePath\n      })\n      // 3.调用数组的splice方法, 把图片信息对象, 从pics数组中移除\n      this.addForm.pics.splice(index, 1)\n    },\n    /**\n     * 处理图片预览效果\n     * @param file\n     */\n    handlePreview (file) {\n      console.log(file)\n      this.previewPath = file.response.data.url\n      this.previewVisible = true\n    },\n    /**\n     * 监听图片上传的成功的事件\n     */\n    handleSuccess (response) {\n      // 1.拼接得到一个图片信息对象\n      const picInfo = { pic: response.data.tmp_path }\n      // 2.将图片信息对象, push到 pics数组中\n      this.addForm.pics.push(picInfo)\n      console.log(this.addForm)\n    },\n    /**\n     * 添加商品按钮\n     */\n    add () {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) {\n          return this.$message.error('请填写必要的表单项!')\n        }\n        // 执行添加的业务逻辑\n        /**\n         * 级联选择器中 v-model绑定的只能是数组吗?  疑问: 老师的element-ui版本和我这个版本不一样\n         * 将数组转换为字符串\n         * @type {*}\n         */// 对addForm进行深拷贝  lodash cloneDeep(obj)\n        const form = _.cloneDeep(this.addForm)\n        form.goods_cat = form.goods_cat.join(',')\n        // this.addForm.goods_cat = this.addForm.goods_cat.join(',')\n\n        // 处理动态参数\n        this.manyTableData.forEach(item => {\n          const newInfo = {\n            attr_id: item.attr_id,\n            attr_value: item.attr_vals.join(' ')\n          }\n          this.addForm.attrs.push(newInfo)\n        })\n        // 处理静态属性\n        this.onlyTableData.forEach(item => {\n          const newInfo = {\n            attr_id: item.attr_id,\n            attr_value: item.attr_vals\n          }\n          this.addForm.attrs.push(newInfo)\n        })\n        form.attrs = this.addForm.attrs\n        console.log(form)\n        const { data: res } = await this.$http.post('goods', form)\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加商品失败!')\n        }\n        this.$message.success('添加商品成功!')\n        // 编程式导航, 跳转页面\n        await this.$router.push('/goods')\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n\n.el-checkbox {\n  // margin 上 右 下 左\n  margin: 0 15px 0 0 !important;\n}\n\n.btnAdd {\n  margin-top: 15px;\n}\n\n.previewImg {\n  width: 100%;\n}\n</style>\n"]}]}